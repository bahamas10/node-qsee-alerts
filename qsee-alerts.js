/**
 * Capture and react to alerts generated by Q-See cameras over SMTP
 *
 * Author: Dave Eddy <dave@daveeddy.com>
 * Date: March 11, 2017
 * License: MIT
 */

var events = require('events');
var fs = require('fs');
var path = require('path');
var util = require('util');
var f = util.format;

var assert = require('assert-plus');
var mkdirp = require('mkdirp');

var MailParser = require('mailparser').MailParser;
var SMTPServer = require('smtp-server').SMTPServer;

// an attachment must match this regex to be considered valid
var ATTACHMENT_RE = /^[a-zA-Z0-9_-]+\.(jpg|png)$/;

function QSeeAlertsServer(opts) {
    var self = this;

    assert.object(opts, 'opts');
    assert.string(opts.host, 'opts.host');
    assert.number(opts.port, 'opts.port');
    assert.string(opts.username, 'opts.username');
    assert.string(opts.password, 'opts.password');
    assert.optionalBool(opts.parseAttachments, 'opts.parseAttachments');
    assert.optionalString(opts.attachmentsDir, 'opts.attachmentsDir');

    events.EventEmitter.call(self);

    var connections = {};

    self.server = new SMTPServer({
        secure: false,
        disabledCommands: ['STARTTLS'],
        authOptional: true,
        onAuth: onAuth,
        onConnect: onConnect,
        onData: onData,
        onClose: onClose
    });
    self.server.listen(opts.port, opts.host, onconnected);

    function onconnected() {
        self.emit('ready');
    }

    function onConnect(session, cb) {
        connections[session.id] = session;
        cb();
    }

    function onAuth(auth, session, cb) {
        var err;

        // find the session
        if (!connections[session.id]) {
            err = new Error(f('[%s] Unexpected auth from user "%s" (%s)',
                session.id, auth.username, session.remoteAddress));
            self.emit('warning', err);
            cb(err);
            return;
        }

        // check username and password
        if (auth.username !== opts.username || auth.password !== opts.password) {
            err = new Error(f('[%s] Auth failure for user "%s" (%s)',
                session.id, auth.username, session.remoteAddress));
            self.emit('warning', err);
            cb(err);
            return;
        }

        cb(null, {user: auth.username});
    }

    function onData(stream, session, cb) {
        var err;
        var dname;

        // find the session
        if (!connections[session.id]) {
            err = new Error(f('[%s] Unexpected data (%s)',
                session.id, session.remoteAddress));
            self.emit('warning', err);
            cb(err);
            return;
        }

        var parser = new MailParser();
        if (opts.attachmentsDir)
            dname = path.join(opts.attachmentsDir, Date.now().toString());

        // callback object
        var ret = {
            attachments: {
                files: []
            }
        };
        if (dname) {
            ret.attachments.dir = dname;
        }

        parser.on('headers', function (headers) {
            ret.subject = headers.get('subject');
            ret.date = headers.get('date');
            ret.from = headers.get('from').text;
            ret.to = headers.get('to').text;
        });

        parser.on('data', function (data) {
            switch (data.type) {
            case 'attachment':
                if (!opts.parseAttachments) {
                    data.release();
                    return;
                }

                if (!ATTACHMENT_RE.test(data.filename)) {
                    self.emit('warning', new Error(f('filename failed regex match: "%s"',
                        data.filename)));
                    data.release();
                    return;
                }

                if (dname) {
                    // write the attachment to a file
                    mkdirp.sync(dname);
                    var fname = path.join(dname, data.filename);

                    var ws = fs.createWriteStream(fname);
                    data.content.pipe(ws);
                    ws.on('close', function () {
                        ret.attachments.files.push(fname);
                        data.release();
                    });
                } else {
                    // save the files as a buffer
                    var buffers = [];
                    data.content.on('data', function (buf) {
                        buffers.push(buf);
                    });
                    data.content.on('end', function () {
                        ret.attachments.files.push({
                            data: Buffer.concat(buffers),
                            filename: data.filename
                        });
                        data.release();
                    });
                }
                break;
            case 'text':
                ret.rawBody = data.text;

                /*
                 * attempt to parse the email body, exmaple output:
                 *
                 * Device ID: 0, Device Name: EDVR
                 *
                 *
                 * Channel ID: 1, Camera Name:CAMERA01
                 * Alarm Type:Motion Alarm, Time:2017-3-11 12:59:33
                 */
                ret.data = {};
                data.text.split('\n').forEach(function (line) {
                    if (line.trim() === '') {
                        return;
                    }
                    line.split(', ').forEach(function (s) {
                        var match = s.match(/([^:]+):(.*)$/);
                        if (!match) {
                            return;
                        }

                        var key = match[1];
                        var value = match[2].trim();
                        ret.data[key] = value;
                    });
                });
                break;
            default:
                self.emit('warning', new Error(f('unexpected data.type "%s"', data.type)));
                break;
            }
        });

        parser.on('end', function () {
            if (ret.attachments.files.length === 0) {
                delete ret.attachments;
            }
            self.emit('alert', ret);
            cb();
        });

        stream.pipe(parser);
    }

    function onClose(session) {
        var err;

        // find the session
        if (!connections[session.id]) {
            err = new Error(f('[%s] Unexpected close (%s)',
                session.id, session.remoteAddress));
            self.emit('warning', err);
            return;
        }

        delete connections[session];
    }
}
util.inherits(QSeeAlertsServer, events.EventEmitter);

QSeeAlertsServer.prototype.stop = function stop(cb) {
    var self = this;

    assert.func(cb, 'cb');
    assert(self.server, 'not running');

    self.server.close(function () {
        delete self.server;
        cb();
    });
};

function main() {
    var opts = {
        host: '0.0.0.0',
        port: 10465,
        parseAttachments: true,
        attachmentsDir: path.join(__dirname, 'attachments'),
        username: 'foo@test.com',
        password: 'bar'
    };
    var qsee = new QSeeAlertsServer(opts);
    qsee.on('ready', function () {
        console.log('server running');
    });
    qsee.on('warning', function (e) {
        console.error('[warning] %s', e.message);
    });
    qsee.on('alert', function (obj) {
        console.log(obj);
        console.log(obj.attachments.files)
    });
}
if (require.main === module)
    main();
